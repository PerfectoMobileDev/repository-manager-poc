Serverless Project Setup - Node with Express

Links
https://serverless.com/blog/serverless-express-rest-api/

Project Setup

mkdir repository-manager && cd repository-manager
npm init -f

Create serverless.yml

Implement handlers

sls deploy

Add package (prod):

npm install <npm package name>

https://mybucket.s3.amazonaws.com/test.jpg?AWSAccessKeyId=AABFBIAWAEAUKAYGAFAA&Expires=1391069292&Signature=u%2BrqUtt3t6BfKHAlbXcZcTJIOWQ%3D

curl -v -T myimage.jpg https://mybucket.s3.amazonaws.com/test.jpg?AWSAccessKeyId=AABFBIAWAEAUKAYGAFAA&Expires=1391069292&Signature=u%2BrqUtt3t6BfKHAlbXcZcTJIOWQ%3D
curl -v -H "image/jpeg" -T myimage.jpg https://mybucket.s3.amazonaws.com/test.jpg?AWSAccessKeyId=AABFBIAWAEAUKAYGAFAA&Content-Type=image%2Fjpeg&Expires=1391068501&Signature=0yF%2BmzDhyU3g2hr%2BfIcVSnE22rY%3D&x-amz-acl=public-read-write

IKMPORTANT: S3 bucket must have the following CORS:

<CORSConfiguration>
  <CORSRule>
    <AllowedOrigin>*</AllowedOrigin>
    <AllowedMethod>GET</AllowedMethod>
    <AllowedMethod>PUT</AllowedMethod>
    <MaxAgeSeconds>3000</MaxAgeSeconds>
    <AllowedHeader>Authorization</AllowedHeader>
  </CORSRule>
</CORSConfiguration>

Also lambda must have the permissions to write to the bucket as described in https://stackoverflow.com/questions/48709277/lambda-pre-signed-url-access-denied

curl -v -H "Content-Type: application/octet-stream" -T /Users/mosheb/Downloads/2018-04-11_12h53_41.png "https://perfecto-repository-dev-us-east-1.s3.amazonaws.com/mynodefolder/myfile?Content-Type=application%2Foctet-stream&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIA572PGX2EZFUUEOGY%2F20190113%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Date=20190113T152716Z&X-Amz-Expires=900&X-Amz-Security-Token=FQoGZXIvYXdzEJf%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaDDhX9ARvrFXhArrGniKMAuF918wBV%2B5e1k5oHlNWMUvMdVQXtfyDrLuBuzJ5qNQfEg1Y0Rpue5mcJz8v04%2FZxZLZshGC7mqmmW7AyG%2B11H76ZFxZiLH5bZPlH7J9YliGYCeWCMwaNyWCJBOxehSZGyZURdQk%2BmPx8JEJiJLbpmyCKDgtI4BgfeFoWK8Zu1lntWUdW8caM9d5j6%2FyJtJjtr%2BYx0E%2BpW8s%2BB5zZ6Dx3JJW3oQ%2Bk41li%2FXJa5y3VkHjyDojl6Rvad6%2FCafb9zD%2BYLwNDWzF%2Ba2%2FoRLkEFphq5NCYgqbZpHd%2FZWsIdRPa71RcpsXuejQaALhtia1KS%2B8US6vRO97bTnfPptVxaTqvVkLywP7LrIPFLCO9nUoy4ft4QU%3D&X-Amz-Signature=402c98cb95726a0d7a4e8d5bb8a64a14d6aeac49d27d54d443e107f3c0a68097&X-Amz-SignedHeaders=host"


Unit tests

Installed Jest:
npm install --save-dev jest

run tests:

./node_modules/.bin/jest

=========================
SAM
=========================
Create S3 bucket for the deployment package (one time)
aws s3 mb s3://perfecto-sam-dev-deployment-packages

Pack and put in S3
sam package     --template-file template.yaml     --output-template-file packaged.yaml     --s3-bucket perfecto-sam-dev-deployment-packages

deploy
sam deploy \
    --template-file packaged.yaml \
    --stack-name repository-manager-sam-dev-us-east-1 \
    --capabilities CAPABILITY_IAM \
    --region us-east-1


test:

https://mctllfjsu4.execute-api.us-east-1.amazonaws.com/stage/uploadlink/samfolder/samobject

Done:
  - Basic deployment
  - Unit tests
  - Jenkins pipeline
  - Version management - by git plugin and automatic Lamda support
  - Project tag
  - Debug local Lambda on MAC (VSCode + IntelliJ)
  - Logs: 
      - Lambda: In cloudwatch and also commmandline, e.g.:
          serverless logs -f getUploadLink --stage dev -t
  

Open issues:
  - Test on Windows
  - Overall Costs
  - Gradual deployment (Canary https://serverless.com/blog/manage-canary-deployments-lambda-functions-serverless-framework/)
  - Add CORS and expiration to CloudFormation for bucket
  - Fight cold start: https://serverless.com/blog/keep-your-lambdas-warm/
  - APIGateway logs: https://forum.serverless.com/t/knowledge-sharing-enable-cloud-watch-logs-for-api-gateway-using-serverless/3287
  - Layers - done, not sure we need it.
  - Internal/External services: by default services are public, and we have authentication. If we need private, we can use resource policies as described here:
    https://github.com/serverless/serverless/issues/4926 
  - Discovery (Route53? CloudMap?)
  - authentication and autothrization?
  - Metrics (pricing?)
  - Guidelines: When is it recommended (Costs, performance)
  - WAF (https://aws.amazon.com/blogs/compute/amazon-api-gateway-adds-support-for-aws-waf/) - not supported yet by Serverless, need to follow up on this one
  - NPM package versions - to be fix
  - Applcaitive monitoring - how?
  - getting rid of stage in the API URL


Local invocation (not really good enough, we want to functioj to run behind API gateway):
https://serverless.com/framework/docs/providers/aws/cli-reference/invoke-local/

serverless-offline (allows running locally behind API Gateway) (JavaScript, Pyhton and Ruby only):
https://www.npmjs.com/package/serverless-offline

Installing Plugins
https://serverless.com/framework/docs/providers/aws/cli-reference/plugin-install/ 
List of plugins:
https://github.com/serverless/plugins
Recomended plugins:
https://www.npmjs.com/package/serverless-plugin-git-variables
https://www.npmjs.com/package/serverless-offline

Custom domains
--------------
https://serverless.com/blog/serverless-api-gateway-domain/

Steps:

npm install serverless-domain-manager --save-dev

Added plugin:

  plugins:
    - serverless-domain-manager

Added Custom domain:

    customDomain:
    domainName: repositorymanager.aws-dev.perfectomobile.com
    stage: dev
    basePath: api
    certificateName: '*.perfectomobile.com'
    createRoute53Record: true
    endpointType: 'edge'

serverless create_domain --stage dev

serverless deploy --stage dev

And then API is available under:

https://repositorymanager.aws-dev.perfectomobile.com/api/uploadlink/kuku/muku

TODO:

 - Add acm:ListCertificates to Cloudformati0onDeployment in all accounts
 - Check deploying under the same domain a few APIs

---------------
Authentication
--------------
Getting public key from KeyCloak:
https://auth.perfectomobile.com/auth/realms/mobilecloud-perfectomobile-com

mobilecloud offline token:
eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJiYVZyVnJ0V2V3ZVN5dk02cEVObzh2QlJzVzBIeUZOY3V6QzdBMkRBT0M0In0.eyJqdGkiOiJjMjQ1OTJkMi1lNzMyLTQ2YWQtYjM5ZS02M2E3NjQ5MzY3YmEiLCJleHAiOjAsIm5iZiI6MCwiaWF0IjoxNTQ4NTk5NjMwLCJpc3MiOiJodHRwczovL2F1dGgucGVyZmVjdG9tb2JpbGUuY29tL2F1dGgvcmVhbG1zL21vYmlsZWNsb3VkLXBlcmZlY3RvbW9iaWxlLWNvbSIsImF1ZCI6Im9mZmxpbmUtdG9rZW4tZ2VuZXJhdG9yIiwic3ViIjoiZDdlYmZhZTktZWM4NC00NGZmLTg5OTYtMzhhZDg4NGJiMjM1IiwidHlwIjoiT2ZmbGluZSIsImF6cCI6Im9mZmxpbmUtdG9rZW4tZ2VuZXJhdG9yIiwibm9uY2UiOiIyZjY2MTY5YS00MmZkLTQ3OWEtYjViZC1mNzRmMWYyNWFmZmIiLCJhdXRoX3RpbWUiOjAsInNlc3Npb25fc3RhdGUiOiJhNjIyOWYyNC1mMGE3LTRkZTQtOTYwMS0zNGUyOTNlNGVjOGQiLCJyZWFsbV9hY2Nlc3MiOnsicm9sZXMiOlsib2ZmbGluZV9hY2Nlc3MiLCJ1bWFfYXV0aG9yaXphdGlvbiJdfSwicmVzb3VyY2VfYWNjZXNzIjp7InJlcG9ydGl1bSI6eyJyb2xlcyI6WyJleGVjdXRpb25fYWRtaW4iXX0sImFjY291bnQiOnsicm9sZXMiOlsibWFuYWdlLWFjY291bnQiLCJtYW5hZ2UtYWNjb3VudC1saW5rcyIsInZpZXctcHJvZmlsZSJdfX19.axYPawU20Y42_O8KbdRtN0OwkaBa0QM0yTrZoBzk715vN3OLIo0Ap2jNWIzx83BAK1hVvknMU7g4dpbEEkU6NKAwwrBWuBtrnEnVsCKnTcH8IlUADm71pjlPOSWlGzs-81hkFKHpmHKlbV0OWR8j7Coc8tMF_c-ihKj_q_owo7Wi7-bxJQBLXmKN7Vk89Yf6qxooRZGaMEwcfDSPt1jm529Cqyf2AMKvZoviD4uKwAz7U2lCdd1E0CcmpsEplfTSWPkK7PUQJXlll54iGXGaGvcX0751grK3XbAIBK7WQRccZ3PZjtbU1y2xVkHioFsOACe4jPryxa2p8ffNGDv3wQ

Authorizer event: https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-lambda-authorizer-input.html

Access token from offline token
refresh_token:OFFLINE-TOKEN
grant_type:refresh_token
client_id:offline-token-generator
URL:https://auth.perfectomobile.com/auth/realms/REALM-NAME/protocol/openid-connect/token
Donâ€™t forget to mark the x-www-form-urlencoded option

Where we are - deployed authorizer with hard coded realm public key for mobilecloud.
Created offline key and access key
TRying to test authorizer and failed.
Also API is not really protected - why?